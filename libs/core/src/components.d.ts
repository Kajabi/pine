/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { TextareaChangeEventDetail } from "./components/pds-textarea/textarea-interface";
export { TextareaChangeEventDetail } from "./components/pds-textarea/textarea-interface";
export namespace Components {
    interface PdsAvatar {
        /**
          * The alt for a custom user image.
          * @defaultValue null
         */
        "alt"?: string | null;
        /**
          * Determines whether the badge is visible or not.
          * @defaultValue false
         */
        "badge"?: boolean;
        /**
          * A unique identifier used for the underlying component `id` attribute.
         */
        "componentId": string;
        /**
          * Determines whether the avatar functions as a dropdown trigger.
          * @defaultValue false
         */
        "dropdown"?: boolean;
        /**
          * The src for a custom user image.
          * @defaultValue null
         */
        "image"?: string | null;
        /**
          * Size of the avatar. Value can be preset or custom.
          * @defaultValue lg
         */
        "size"?: | 'xl' // 64px
  | 'lg' // 56px
  | 'md' // 40px
  | 'sm' // 32px
  | 'xs' // 24px
  | string;
        /**
          * Determines the variant of avatar. Changes appearance accordingly.
          * @defaultValue customer
         */
        "variant"?: 'customer' | 'admin';
    }
    interface PdsButton {
        /**
          * A unique identifier used for the underlying component `id` attribute.
         */
        "componentId": string;
        /**
          * Toggles disabled state of button
          * @defaultValue false
         */
        "disabled"?: boolean;
        /**
          * Displays icon before text when icon string matches an icon name
         */
        "icon"?: string;
        /**
          * Provides button with a submittable name
         */
        "name"?: string;
        /**
          * Provides button with a type
          * @defaultValue button
         */
        "type"?: 'button' | 'reset' | 'submit';
        /**
          * Provides button with a submittable value
         */
        "value"?: string;
        /**
          * Sets button variant styles as outlined in Figma documentation
         */
        "variant": 'primary' | 'secondary' | 'accent' | 'disclosure' | 'destructive' | 'unstyled';
    }
    interface PdsCheckbox {
        /**
          * It determines whether or not the checkbox is checked.
         */
        "checked": boolean;
        /**
          * A unique identifier used for the underlying component `id` attribute and the label `for` attribute.
         */
        "componentId": string;
        /**
          * It determines whether or not the checkbox is disabled.
         */
        "disabled": boolean;
        /**
          * Displays message text describing an invalid state.
         */
        "errorMessage": string;
        /**
          * String used for helper message below checkbox.
         */
        "helperMessage": string;
        /**
          * If `true`, the checkbox will visually appear as indeterminate. Only JavaScript can set the objects `indeterminate` property. See [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#indeterminate_state_checkboxes).
         */
        "indeterminate": boolean;
        /**
          * It determines whether or not the checkbox is invalid.
         */
        "invalid": boolean;
        /**
          * String used for label text next to checkbox.
         */
        "label": string;
        /**
          * String used for checkbox `name` attribute.
         */
        "name": string;
        /**
          * It determines whether or not the checkbox is required.
         */
        "required": boolean;
        /**
          * The value of the checkbox that is submitted with a form.
         */
        "value": string;
    }
    interface PdsChip {
        /**
          * A unique identifier used for the underlying component `id` attribute.
         */
        "componentId": string;
        /**
          * Determines whether a dot should be displayed on the chip.
          * @defaultValue false
         */
        "dot": boolean;
        /**
          * Sets the text label content of the chip.
         */
        "label": string;
        /**
          * Determines whether the chip should be rendered in a larger size.
          * @defaultValue false
         */
        "large": boolean;
        /**
          * Sets the color scheme of the chip.
          * @defaultValue 'neutral'
         */
        "sentiment": 'accent' | 'danger' | 'info' | 'neutral' | 'success' | 'warning';
        /**
          * Sets the style variant of the chip.
          * @defaultValue 'text'
         */
        "variant": 'text' | 'tag' | 'dropdown';
    }
    interface PdsCopytext {
        /**
          * Determines whether `copytext` should have a border.
          * @defaultValue true
         */
        "border": boolean;
        /**
          * A unique identifier used for the underlying component `id` attribute.
         */
        "componentId": string;
        /**
          * Determines whether `copytext` should expand to the full width of its container.
          * @defaultValue false
         */
        "fullWidth": boolean;
        /**
          * Determines whether the `value` should truncate and display with an ellipsis.
          * @defaultValue false
         */
        "truncate": boolean;
        /**
          * String that is displayed and that is also copied to the clipboard upon interaction.
         */
        "value": string;
    }
    interface PdsDivider {
        /**
          * A unique identifier used for the underlying component `id` attribute.
         */
        "componentId": string;
        /**
          * Adds offset margin/padding to expand the width (horizontal) or the height (vertical) of divider.
         */
        "offset": 'xxs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl';
        /**
          * Sets divider to display vertically
          * @defaultValue false
         */
        "vertical": boolean;
    }
    interface PdsImage {
        /**
          * The image's alt tag. If none is provided, it will default to an empty string.
         */
        "alt"?: string;
        /**
          * A unique identifier used for the underlying component `id` attribute.
         */
        "componentId": string;
        /**
          * The height of the image in pixels. Setting this will devote space in the layout to prevent layout shifts when the image is loaded.
         */
        "height"?: number;
        /**
          * Indicates how the browser should load the image.
         */
        "loading"?: 'eager' | 'lazy';
        /**
          * Determines the intended display size of an image within certian breakpoints. Has no effect if `srcset` is not set or value has no width descriptor.
         */
        "sizes"?: string;
        /**
          * The image's source.
         */
        "src": string;
        /**
          * A set of image sources for the browser to use.
         */
        "srcset"?: string;
        /**
          * The width of the image in pixels. Setting this will devote space in the layout to prevent layout shifts when the image is loaded.
         */
        "width"?: number;
    }
    interface PdsInput {
        /**
          * A unique identifier used for the underlying component `id` attribute.
         */
        "componentId": string;
        /**
          * Indicates whether or not the input field is disabled.
         */
        "disabled"?: boolean;
        /**
          * Specifies the error message and provides an error-themed treatment to the field.
         */
        "errorMessage"?: string;
        /**
          * Displays a message or hint below the input field.
         */
        "helperMessage"?: string;
        /**
          * Indicates whether or not the input field is invalid or throws an error.
         */
        "invalid"?: boolean;
        /**
          * Text to be displayed as the input label.
         */
        "label"?: string;
        /**
          * Specifies the name. Submitted with the form name/value pair.
         */
        "name"?: string;
        /**
          * Specifies a short hint that describes the expected value of the input field.
         */
        "placeholder"?: string;
        /**
          * Indicates whether or not the input field is readonly.
         */
        "readonly"?: boolean;
        /**
          * Indicates whether or not the input field is required.
         */
        "required"?: boolean;
        /**
          * Determines the type of control that will be displayed `'email'`, `'number'`, `'password'`, `'tel'`, `'text'`
          * @defaultValue "text"
         */
        "type": string;
        /**
          * The value of the input.
         */
        "value"?: string;
    }
    interface PdsLink {
        /**
          * A unique identifier used for the underlying component `id` attribute.
         */
        "componentId": string;
        /**
          * When enabled, opens link in a new tab.
          * @defaultValue false
         */
        "external": boolean;
        /**
          * The Font size follows t-shirt model sm: 12px md: 14px lg: 16px
          * @defaultValue lg
         */
        "fontSize": 'sm' | 'md' | 'lg';
        /**
          * The URL that the hyperlink points to.
         */
        "href": string;
        /**
          * Modifies the look of the link
         */
        "variant": 'inline' | 'plain';
    }
    interface PdsProgress {
        /**
          * Determines whether or not progress is animated.
          * @defaultValue false
         */
        "animated": boolean;
        /**
          * A unique identifier used for the underlying component `id` attribute and the label `for` attribute.
         */
        "componentId": string;
        /**
          * Sets the progress fill color. Accepts a color token or a [valid color value](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value).
          * @defaultValue 'var(--pds-color-primary)'
         */
        "fillColor": string;
        /**
          * String used for label text. Label is visually hidden but required for better accessibility.
         */
        "label": string;
        /**
          * Sets the progress fill pecentage and visually displayed when `show-percentage=true`.
          * @defaultValue 0
         */
        "percent": number;
        /**
          * Determines whether or not the percent value should be displayed as text.
          * @defaultValue false
         */
        "showPercent": boolean;
    }
    interface PdsRadio {
        /**
          * Determines whether or not the radio is checked.
          * @defaultValue false
         */
        "checked": boolean;
        /**
          * A unique identifier used for the underlying component `id` attribute and the label `for` attribute.
         */
        "componentId": string;
        /**
          * Determines whether or not the radio is disabled.
          * @defaultValue false
         */
        "disabled": boolean;
        /**
          * Displays message text describing an invalid state.
         */
        "errorMessage": string;
        /**
          * String used for helper message below radio.
         */
        "helperMessage": string;
        /**
          * Determines whether or not the radio is invalid.
          * @defaultValue false
         */
        "invalid": boolean;
        /**
          * String used for label text next to radio.
         */
        "label": string;
        /**
          * String used for radio `name` attribute.
         */
        "name": string;
        /**
          * Determines whether or not the radio is required.
          * @defaultValue false
         */
        "required": boolean;
        /**
          * The value of the radio that is submitted with a form.
         */
        "value": string;
    }
    interface PdsSortable {
        /**
          * Determines whether `sortable` should have a border.
          * @defaultValue false
         */
        "border": boolean;
        /**
          * A unique identifier used for the sortable container `id` attribute.
         */
        "componentId": string;
        /**
          * Deternines whether `sortable` items should be divided with border.
         */
        "dividers": boolean;
        /**
          * Determines the grabbable area for the `pds-sortable-item`.
         */
        "handleType": 'handle' | 'row';
    }
    interface PdsSortableItem {
        /**
          * A unique identifier used for the sortable item `id` attribute.
         */
        "componentId": string;
        /**
          * Determines whether `sortable-item-actions` slot should be enabled.
          * @defaultValue false
         */
        "enableActions": boolean;
        /**
          * Determines whether `sortable-item` should have a handle.
          * @defaultValue false
         */
        "handle": boolean;
    }
    interface PdsSwitch {
        /**
          * Determines the input 'checked' state
         */
        "checked": boolean;
        /**
          * A unique identifier used for the underlying component `id` attribute and the label `for` attribute.
         */
        "componentId": string;
        /**
          * Determines the input 'disabled' state, preventing user interaction
         */
        "disabled"?: boolean;
        /**
          * Displays message text describing an invalid state
         */
        "errorMessage"?: string;
        /**
          * Displays help text for additional description of an input
         */
        "helperMessage": string;
        /**
          * Determines the input 'invalid' state, signifying an error is present
         */
        "invalid"?: boolean;
        /**
          * Displays text to describe the input
         */
        "label": string;
        /**
          * Identifies form data and unifies a group of radio inputs for toggling a single property/value
         */
        "name": string;
        /**
          * Determines the 'required' state of the input
         */
        "required"?: boolean;
        /**
          * Specifies the underlying input element type
          * @defaultValue 'checkbox'
         */
        "type": 'checkbox' | 'radio';
        /**
          * Provides input with a string submitted in form data, and can be used to distinguish radio inputs
         */
        "value": string;
    }
    interface PdsTab {
        "index": number;
        /**
          * Sets the related tab name, this name must match a `pds-tabpanel`'s tab name property
         */
        "name": string;
        "parentComponentId": string;
        "selected": boolean;
        "variant": string;
    }
    interface PdsTabpanel {
        /**
          * Sets the related tab name, this name must match a `pds-tab`'s tab name property
         */
        "name": string;
        "parentComponentId": string;
        "selected": boolean;
        "variant": string;
    }
    interface PdsTabs {
        "activeTabIndex": number;
        /**
          * Sets the starting active tab name and maintains the name as the component re-renders
         */
        "activeTabName": string;
        /**
          * A unique identifier used for the underlying component `id` attribute.
         */
        "componentId": string;
        /**
          * Sets the aria-label attached to the tablist element
         */
        "tablistLabel": string;
        /**
          * Sets tabs variant styles as outlined in Figma documentation
         */
        "variant": 'primary' | 'availability' | 'filter';
    }
    interface PdsTextarea {
        /**
          * A unique identifier used for the underlying component `id` attribute.
         */
        "componentId": string;
        /**
          * Indicates whether or not the textarea is disabled
          * @defaultValue false
         */
        "disabled": boolean;
        /**
          * Specifies the error text and provides an error-themed treatment to the field
         */
        "errorMessage"?: string;
        /**
          * Displays a hint or description of the textarea
         */
        "helperMessage"?: string;
        /**
          * Indicates whether or not the textarea is invalid or throws an error
          * @defaultValue false
         */
        "invalid": boolean;
        /**
          * Text to be displayed as the textarea label
         */
        "label"?: string;
        /**
          * Specifies the name, submitted with the form name/value pair. This value will mirror the componentId
         */
        "name": string;
        /**
          * Specifies a short hint that describes the expected value of the textarea
         */
        "placeholder"?: string;
        /**
          * Indicates whether or not the textarea is readonly
          * @defaultValue false
         */
        "readonly": boolean;
        /**
          * Indicates whether or not the textarea is required
          * @defaultValue false
         */
        "required": boolean;
        /**
          * Sets number of rows of text visible without needing to scroll in the textarea
         */
        "rows"?: number;
        /**
          * The value of the textarea
         */
        "value"?: string;
    }
    interface PdsTooltip {
        /**
          * A unique identifier used for the underlying component `id` attribute.
         */
        "componentId": string;
        /**
          * Content for the tooltip. If HTML is required, use the content slot
         */
        "content": string;
        /**
          * Determines whether or not the tooltip has an arrow
          * @defaultValue true
         */
        "hasArrow"?: boolean;
        /**
          * Hides the tooltip by disabling the opened property
         */
        "hideTooltip": () => Promise<void>;
        /**
          * Enable this option when using the content slot
          * @defaultValue false
         */
        "htmlContent": boolean;
        /**
          * Determines whether or not the tooltip is visible
          * @defaultValue false
         */
        "opened": boolean;
        /**
          * Determines the preferred position of the tooltip
          * @defaultValue "right"
         */
        "placement": 'top'
    | 'top-start'
    | 'top-end'
    | 'right'
    | 'right-start'
    | 'right-end'
    | 'bottom'
    | 'bottom-start'
    | 'bottom-end'
    | 'left'
    | 'left-start'
    | 'left-end';
        /**
          * Shows the tooltip by enabling the opened property
         */
        "showTooltip": () => Promise<void>;
    }
}
export interface PdsCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPdsCheckboxElement;
}
export interface PdsChipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPdsChipElement;
}
export interface PdsCopytextCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPdsCopytextElement;
}
export interface PdsInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPdsInputElement;
}
export interface PdsRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPdsRadioElement;
}
export interface PdsSortableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPdsSortableElement;
}
export interface PdsSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPdsSwitchElement;
}
export interface PdsTabCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPdsTabElement;
}
export interface PdsTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPdsTextareaElement;
}
export interface PdsTooltipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPdsTooltipElement;
}
declare global {
    interface HTMLPdsAvatarElement extends Components.PdsAvatar, HTMLStencilElement {
    }
    var HTMLPdsAvatarElement: {
        prototype: HTMLPdsAvatarElement;
        new (): HTMLPdsAvatarElement;
    };
    interface HTMLPdsButtonElement extends Components.PdsButton, HTMLStencilElement {
    }
    var HTMLPdsButtonElement: {
        prototype: HTMLPdsButtonElement;
        new (): HTMLPdsButtonElement;
    };
    interface HTMLPdsCheckboxElementEventMap {
        "pdsCheckboxChange": boolean;
    }
    interface HTMLPdsCheckboxElement extends Components.PdsCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPdsCheckboxElementEventMap>(type: K, listener: (this: HTMLPdsCheckboxElement, ev: PdsCheckboxCustomEvent<HTMLPdsCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPdsCheckboxElementEventMap>(type: K, listener: (this: HTMLPdsCheckboxElement, ev: PdsCheckboxCustomEvent<HTMLPdsCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPdsCheckboxElement: {
        prototype: HTMLPdsCheckboxElement;
        new (): HTMLPdsCheckboxElement;
    };
    interface HTMLPdsChipElementEventMap {
        "pdsTagCloseClick": any;
    }
    interface HTMLPdsChipElement extends Components.PdsChip, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPdsChipElementEventMap>(type: K, listener: (this: HTMLPdsChipElement, ev: PdsChipCustomEvent<HTMLPdsChipElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPdsChipElementEventMap>(type: K, listener: (this: HTMLPdsChipElement, ev: PdsChipCustomEvent<HTMLPdsChipElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPdsChipElement: {
        prototype: HTMLPdsChipElement;
        new (): HTMLPdsChipElement;
    };
    interface HTMLPdsCopytextElementEventMap {
        "pdsCopyTextClick": any;
    }
    interface HTMLPdsCopytextElement extends Components.PdsCopytext, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPdsCopytextElementEventMap>(type: K, listener: (this: HTMLPdsCopytextElement, ev: PdsCopytextCustomEvent<HTMLPdsCopytextElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPdsCopytextElementEventMap>(type: K, listener: (this: HTMLPdsCopytextElement, ev: PdsCopytextCustomEvent<HTMLPdsCopytextElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPdsCopytextElement: {
        prototype: HTMLPdsCopytextElement;
        new (): HTMLPdsCopytextElement;
    };
    interface HTMLPdsDividerElement extends Components.PdsDivider, HTMLStencilElement {
    }
    var HTMLPdsDividerElement: {
        prototype: HTMLPdsDividerElement;
        new (): HTMLPdsDividerElement;
    };
    interface HTMLPdsImageElement extends Components.PdsImage, HTMLStencilElement {
    }
    var HTMLPdsImageElement: {
        prototype: HTMLPdsImageElement;
        new (): HTMLPdsImageElement;
    };
    interface HTMLPdsInputElementEventMap {
        "pdsInput": InputEvent;
    }
    interface HTMLPdsInputElement extends Components.PdsInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPdsInputElementEventMap>(type: K, listener: (this: HTMLPdsInputElement, ev: PdsInputCustomEvent<HTMLPdsInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPdsInputElementEventMap>(type: K, listener: (this: HTMLPdsInputElement, ev: PdsInputCustomEvent<HTMLPdsInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPdsInputElement: {
        prototype: HTMLPdsInputElement;
        new (): HTMLPdsInputElement;
    };
    interface HTMLPdsLinkElement extends Components.PdsLink, HTMLStencilElement {
    }
    var HTMLPdsLinkElement: {
        prototype: HTMLPdsLinkElement;
        new (): HTMLPdsLinkElement;
    };
    interface HTMLPdsProgressElement extends Components.PdsProgress, HTMLStencilElement {
    }
    var HTMLPdsProgressElement: {
        prototype: HTMLPdsProgressElement;
        new (): HTMLPdsProgressElement;
    };
    interface HTMLPdsRadioElementEventMap {
        "pdsRadioChange": boolean;
    }
    interface HTMLPdsRadioElement extends Components.PdsRadio, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPdsRadioElementEventMap>(type: K, listener: (this: HTMLPdsRadioElement, ev: PdsRadioCustomEvent<HTMLPdsRadioElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPdsRadioElementEventMap>(type: K, listener: (this: HTMLPdsRadioElement, ev: PdsRadioCustomEvent<HTMLPdsRadioElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPdsRadioElement: {
        prototype: HTMLPdsRadioElement;
        new (): HTMLPdsRadioElement;
    };
    interface HTMLPdsSortableElementEventMap {
        "pdsSortableItemMoved": any;
    }
    interface HTMLPdsSortableElement extends Components.PdsSortable, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPdsSortableElementEventMap>(type: K, listener: (this: HTMLPdsSortableElement, ev: PdsSortableCustomEvent<HTMLPdsSortableElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPdsSortableElementEventMap>(type: K, listener: (this: HTMLPdsSortableElement, ev: PdsSortableCustomEvent<HTMLPdsSortableElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPdsSortableElement: {
        prototype: HTMLPdsSortableElement;
        new (): HTMLPdsSortableElement;
    };
    interface HTMLPdsSortableItemElement extends Components.PdsSortableItem, HTMLStencilElement {
    }
    var HTMLPdsSortableItemElement: {
        prototype: HTMLPdsSortableItemElement;
        new (): HTMLPdsSortableItemElement;
    };
    interface HTMLPdsSwitchElementEventMap {
        "pdsSwitchChange": InputEvent;
    }
    interface HTMLPdsSwitchElement extends Components.PdsSwitch, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPdsSwitchElementEventMap>(type: K, listener: (this: HTMLPdsSwitchElement, ev: PdsSwitchCustomEvent<HTMLPdsSwitchElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPdsSwitchElementEventMap>(type: K, listener: (this: HTMLPdsSwitchElement, ev: PdsSwitchCustomEvent<HTMLPdsSwitchElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPdsSwitchElement: {
        prototype: HTMLPdsSwitchElement;
        new (): HTMLPdsSwitchElement;
    };
    interface HTMLPdsTabElementEventMap {
        "pdsTabClick": object;
    }
    interface HTMLPdsTabElement extends Components.PdsTab, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPdsTabElementEventMap>(type: K, listener: (this: HTMLPdsTabElement, ev: PdsTabCustomEvent<HTMLPdsTabElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPdsTabElementEventMap>(type: K, listener: (this: HTMLPdsTabElement, ev: PdsTabCustomEvent<HTMLPdsTabElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPdsTabElement: {
        prototype: HTMLPdsTabElement;
        new (): HTMLPdsTabElement;
    };
    interface HTMLPdsTabpanelElement extends Components.PdsTabpanel, HTMLStencilElement {
    }
    var HTMLPdsTabpanelElement: {
        prototype: HTMLPdsTabpanelElement;
        new (): HTMLPdsTabpanelElement;
    };
    interface HTMLPdsTabsElement extends Components.PdsTabs, HTMLStencilElement {
    }
    var HTMLPdsTabsElement: {
        prototype: HTMLPdsTabsElement;
        new (): HTMLPdsTabsElement;
    };
    interface HTMLPdsTextareaElementEventMap {
        "pdsTextareaChange": TextareaChangeEventDetail;
    }
    interface HTMLPdsTextareaElement extends Components.PdsTextarea, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPdsTextareaElementEventMap>(type: K, listener: (this: HTMLPdsTextareaElement, ev: PdsTextareaCustomEvent<HTMLPdsTextareaElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPdsTextareaElementEventMap>(type: K, listener: (this: HTMLPdsTextareaElement, ev: PdsTextareaCustomEvent<HTMLPdsTextareaElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPdsTextareaElement: {
        prototype: HTMLPdsTextareaElement;
        new (): HTMLPdsTextareaElement;
    };
    interface HTMLPdsTooltipElementEventMap {
        "pdsTooltipHide": any;
        "pdsTooltipShow": any;
    }
    interface HTMLPdsTooltipElement extends Components.PdsTooltip, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPdsTooltipElementEventMap>(type: K, listener: (this: HTMLPdsTooltipElement, ev: PdsTooltipCustomEvent<HTMLPdsTooltipElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPdsTooltipElementEventMap>(type: K, listener: (this: HTMLPdsTooltipElement, ev: PdsTooltipCustomEvent<HTMLPdsTooltipElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPdsTooltipElement: {
        prototype: HTMLPdsTooltipElement;
        new (): HTMLPdsTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "pds-avatar": HTMLPdsAvatarElement;
        "pds-button": HTMLPdsButtonElement;
        "pds-checkbox": HTMLPdsCheckboxElement;
        "pds-chip": HTMLPdsChipElement;
        "pds-copytext": HTMLPdsCopytextElement;
        "pds-divider": HTMLPdsDividerElement;
        "pds-image": HTMLPdsImageElement;
        "pds-input": HTMLPdsInputElement;
        "pds-link": HTMLPdsLinkElement;
        "pds-progress": HTMLPdsProgressElement;
        "pds-radio": HTMLPdsRadioElement;
        "pds-sortable": HTMLPdsSortableElement;
        "pds-sortable-item": HTMLPdsSortableItemElement;
        "pds-switch": HTMLPdsSwitchElement;
        "pds-tab": HTMLPdsTabElement;
        "pds-tabpanel": HTMLPdsTabpanelElement;
        "pds-tabs": HTMLPdsTabsElement;
        "pds-textarea": HTMLPdsTextareaElement;
        "pds-tooltip": HTMLPdsTooltipElement;
    }
}
declare namespace LocalJSX {
    interface PdsAvatar {
        /**
          * The alt for a custom user image.
          * @defaultValue null
         */
        "alt"?: string | null;
        /**
          * Determines whether the badge is visible or not.
          * @defaultValue false
         */
        "badge"?: boolean;
        /**
          * A unique identifier used for the underlying component `id` attribute.
         */
        "componentId"?: string;
        /**
          * Determines whether the avatar functions as a dropdown trigger.
          * @defaultValue false
         */
        "dropdown"?: boolean;
        /**
          * The src for a custom user image.
          * @defaultValue null
         */
        "image"?: string | null;
        /**
          * Size of the avatar. Value can be preset or custom.
          * @defaultValue lg
         */
        "size"?: | 'xl' // 64px
  | 'lg' // 56px
  | 'md' // 40px
  | 'sm' // 32px
  | 'xs' // 24px
  | string;
        /**
          * Determines the variant of avatar. Changes appearance accordingly.
          * @defaultValue customer
         */
        "variant"?: 'customer' | 'admin';
    }
    interface PdsButton {
        /**
          * A unique identifier used for the underlying component `id` attribute.
         */
        "componentId"?: string;
        /**
          * Toggles disabled state of button
          * @defaultValue false
         */
        "disabled"?: boolean;
        /**
          * Displays icon before text when icon string matches an icon name
         */
        "icon"?: string;
        /**
          * Provides button with a submittable name
         */
        "name"?: string;
        /**
          * Provides button with a type
          * @defaultValue button
         */
        "type"?: 'button' | 'reset' | 'submit';
        /**
          * Provides button with a submittable value
         */
        "value"?: string;
        /**
          * Sets button variant styles as outlined in Figma documentation
         */
        "variant"?: 'primary' | 'secondary' | 'accent' | 'disclosure' | 'destructive' | 'unstyled';
    }
    interface PdsCheckbox {
        /**
          * It determines whether or not the checkbox is checked.
         */
        "checked"?: boolean;
        /**
          * A unique identifier used for the underlying component `id` attribute and the label `for` attribute.
         */
        "componentId": string;
        /**
          * It determines whether or not the checkbox is disabled.
         */
        "disabled"?: boolean;
        /**
          * Displays message text describing an invalid state.
         */
        "errorMessage"?: string;
        /**
          * String used for helper message below checkbox.
         */
        "helperMessage"?: string;
        /**
          * If `true`, the checkbox will visually appear as indeterminate. Only JavaScript can set the objects `indeterminate` property. See [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#indeterminate_state_checkboxes).
         */
        "indeterminate"?: boolean;
        /**
          * It determines whether or not the checkbox is invalid.
         */
        "invalid"?: boolean;
        /**
          * String used for label text next to checkbox.
         */
        "label"?: string;
        /**
          * String used for checkbox `name` attribute.
         */
        "name"?: string;
        /**
          * Emits a boolean indicating whether the checkbox is currently checked or unchecked.
         */
        "onPdsCheckboxChange"?: (event: PdsCheckboxCustomEvent<boolean>) => void;
        /**
          * It determines whether or not the checkbox is required.
         */
        "required"?: boolean;
        /**
          * The value of the checkbox that is submitted with a form.
         */
        "value"?: string;
    }
    interface PdsChip {
        /**
          * A unique identifier used for the underlying component `id` attribute.
         */
        "componentId"?: string;
        /**
          * Determines whether a dot should be displayed on the chip.
          * @defaultValue false
         */
        "dot"?: boolean;
        /**
          * Sets the text label content of the chip.
         */
        "label"?: string;
        /**
          * Determines whether the chip should be rendered in a larger size.
          * @defaultValue false
         */
        "large"?: boolean;
        /**
          * Event when close button is clicked on tag variant.
         */
        "onPdsTagCloseClick"?: (event: PdsChipCustomEvent<any>) => void;
        /**
          * Sets the color scheme of the chip.
          * @defaultValue 'neutral'
         */
        "sentiment"?: 'accent' | 'danger' | 'info' | 'neutral' | 'success' | 'warning';
        /**
          * Sets the style variant of the chip.
          * @defaultValue 'text'
         */
        "variant"?: 'text' | 'tag' | 'dropdown';
    }
    interface PdsCopytext {
        /**
          * Determines whether `copytext` should have a border.
          * @defaultValue true
         */
        "border"?: boolean;
        /**
          * A unique identifier used for the underlying component `id` attribute.
         */
        "componentId"?: string;
        /**
          * Determines whether `copytext` should expand to the full width of its container.
          * @defaultValue false
         */
        "fullWidth"?: boolean;
        /**
          * Event when copyText button is clicked.
         */
        "onPdsCopyTextClick"?: (event: PdsCopytextCustomEvent<any>) => void;
        /**
          * Determines whether the `value` should truncate and display with an ellipsis.
          * @defaultValue false
         */
        "truncate"?: boolean;
        /**
          * String that is displayed and that is also copied to the clipboard upon interaction.
         */
        "value": string;
    }
    interface PdsDivider {
        /**
          * A unique identifier used for the underlying component `id` attribute.
         */
        "componentId"?: string;
        /**
          * Adds offset margin/padding to expand the width (horizontal) or the height (vertical) of divider.
         */
        "offset"?: 'xxs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl';
        /**
          * Sets divider to display vertically
          * @defaultValue false
         */
        "vertical"?: boolean;
    }
    interface PdsImage {
        /**
          * The image's alt tag. If none is provided, it will default to an empty string.
         */
        "alt"?: string;
        /**
          * A unique identifier used for the underlying component `id` attribute.
         */
        "componentId"?: string;
        /**
          * The height of the image in pixels. Setting this will devote space in the layout to prevent layout shifts when the image is loaded.
         */
        "height"?: number;
        /**
          * Indicates how the browser should load the image.
         */
        "loading"?: 'eager' | 'lazy';
        /**
          * Determines the intended display size of an image within certian breakpoints. Has no effect if `srcset` is not set or value has no width descriptor.
         */
        "sizes"?: string;
        /**
          * The image's source.
         */
        "src"?: string;
        /**
          * A set of image sources for the browser to use.
         */
        "srcset"?: string;
        /**
          * The width of the image in pixels. Setting this will devote space in the layout to prevent layout shifts when the image is loaded.
         */
        "width"?: number;
    }
    interface PdsInput {
        /**
          * A unique identifier used for the underlying component `id` attribute.
         */
        "componentId": string;
        /**
          * Indicates whether or not the input field is disabled.
         */
        "disabled"?: boolean;
        /**
          * Specifies the error message and provides an error-themed treatment to the field.
         */
        "errorMessage"?: string;
        /**
          * Displays a message or hint below the input field.
         */
        "helperMessage"?: string;
        /**
          * Indicates whether or not the input field is invalid or throws an error.
         */
        "invalid"?: boolean;
        /**
          * Text to be displayed as the input label.
         */
        "label"?: string;
        /**
          * Specifies the name. Submitted with the form name/value pair.
         */
        "name"?: string;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onPdsInput"?: (event: PdsInputCustomEvent<InputEvent>) => void;
        /**
          * Specifies a short hint that describes the expected value of the input field.
         */
        "placeholder"?: string;
        /**
          * Indicates whether or not the input field is readonly.
         */
        "readonly"?: boolean;
        /**
          * Indicates whether or not the input field is required.
         */
        "required"?: boolean;
        /**
          * Determines the type of control that will be displayed `'email'`, `'number'`, `'password'`, `'tel'`, `'text'`
          * @defaultValue "text"
         */
        "type"?: string;
        /**
          * The value of the input.
         */
        "value"?: string;
    }
    interface PdsLink {
        /**
          * A unique identifier used for the underlying component `id` attribute.
         */
        "componentId"?: string;
        /**
          * When enabled, opens link in a new tab.
          * @defaultValue false
         */
        "external"?: boolean;
        /**
          * The Font size follows t-shirt model sm: 12px md: 14px lg: 16px
          * @defaultValue lg
         */
        "fontSize"?: 'sm' | 'md' | 'lg';
        /**
          * The URL that the hyperlink points to.
         */
        "href": string;
        /**
          * Modifies the look of the link
         */
        "variant"?: 'inline' | 'plain';
    }
    interface PdsProgress {
        /**
          * Determines whether or not progress is animated.
          * @defaultValue false
         */
        "animated"?: boolean;
        /**
          * A unique identifier used for the underlying component `id` attribute and the label `for` attribute.
         */
        "componentId": string;
        /**
          * Sets the progress fill color. Accepts a color token or a [valid color value](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value).
          * @defaultValue 'var(--pds-color-primary)'
         */
        "fillColor"?: string;
        /**
          * String used for label text. Label is visually hidden but required for better accessibility.
         */
        "label": string;
        /**
          * Sets the progress fill pecentage and visually displayed when `show-percentage=true`.
          * @defaultValue 0
         */
        "percent"?: number;
        /**
          * Determines whether or not the percent value should be displayed as text.
          * @defaultValue false
         */
        "showPercent"?: boolean;
    }
    interface PdsRadio {
        /**
          * Determines whether or not the radio is checked.
          * @defaultValue false
         */
        "checked"?: boolean;
        /**
          * A unique identifier used for the underlying component `id` attribute and the label `for` attribute.
         */
        "componentId": string;
        /**
          * Determines whether or not the radio is disabled.
          * @defaultValue false
         */
        "disabled"?: boolean;
        /**
          * Displays message text describing an invalid state.
         */
        "errorMessage"?: string;
        /**
          * String used for helper message below radio.
         */
        "helperMessage"?: string;
        /**
          * Determines whether or not the radio is invalid.
          * @defaultValue false
         */
        "invalid"?: boolean;
        /**
          * String used for label text next to radio.
         */
        "label"?: string;
        /**
          * String used for radio `name` attribute.
         */
        "name"?: string;
        /**
          * Emits a boolean indicating whether the checkbox is currently checked or unchecked.
         */
        "onPdsRadioChange"?: (event: PdsRadioCustomEvent<boolean>) => void;
        /**
          * Determines whether or not the radio is required.
          * @defaultValue false
         */
        "required"?: boolean;
        /**
          * The value of the radio that is submitted with a form.
         */
        "value"?: string;
    }
    interface PdsSortable {
        /**
          * Determines whether `sortable` should have a border.
          * @defaultValue false
         */
        "border"?: boolean;
        /**
          * A unique identifier used for the sortable container `id` attribute.
         */
        "componentId": string;
        /**
          * Deternines whether `sortable` items should be divided with border.
         */
        "dividers"?: boolean;
        /**
          * Determines the grabbable area for the `pds-sortable-item`.
         */
        "handleType"?: 'handle' | 'row';
        /**
          * Event emitted when a sortable item is moved.
         */
        "onPdsSortableItemMoved"?: (event: PdsSortableCustomEvent<any>) => void;
    }
    interface PdsSortableItem {
        /**
          * A unique identifier used for the sortable item `id` attribute.
         */
        "componentId"?: string;
        /**
          * Determines whether `sortable-item-actions` slot should be enabled.
          * @defaultValue false
         */
        "enableActions"?: boolean;
        /**
          * Determines whether `sortable-item` should have a handle.
          * @defaultValue false
         */
        "handle"?: boolean;
    }
    interface PdsSwitch {
        /**
          * Determines the input 'checked' state
         */
        "checked"?: boolean;
        /**
          * A unique identifier used for the underlying component `id` attribute and the label `for` attribute.
         */
        "componentId": string;
        /**
          * Determines the input 'disabled' state, preventing user interaction
         */
        "disabled"?: boolean;
        /**
          * Displays message text describing an invalid state
         */
        "errorMessage"?: string;
        /**
          * Displays help text for additional description of an input
         */
        "helperMessage"?: string;
        /**
          * Determines the input 'invalid' state, signifying an error is present
         */
        "invalid"?: boolean;
        /**
          * Displays text to describe the input
         */
        "label": string;
        /**
          * Identifies form data and unifies a group of radio inputs for toggling a single property/value
         */
        "name"?: string;
        /**
          * Emits an event on input change
         */
        "onPdsSwitchChange"?: (event: PdsSwitchCustomEvent<InputEvent>) => void;
        /**
          * Determines the 'required' state of the input
         */
        "required"?: boolean;
        /**
          * Specifies the underlying input element type
          * @defaultValue 'checkbox'
         */
        "type"?: 'checkbox' | 'radio';
        /**
          * Provides input with a string submitted in form data, and can be used to distinguish radio inputs
         */
        "value"?: string;
    }
    interface PdsTab {
        "index"?: number;
        /**
          * Sets the related tab name, this name must match a `pds-tabpanel`'s tab name property
         */
        "name": string;
        "onPdsTabClick"?: (event: PdsTabCustomEvent<object>) => void;
        "parentComponentId"?: string;
        "selected"?: boolean;
        "variant"?: string;
    }
    interface PdsTabpanel {
        /**
          * Sets the related tab name, this name must match a `pds-tab`'s tab name property
         */
        "name": string;
        "parentComponentId"?: string;
        "selected"?: boolean;
        "variant"?: string;
    }
    interface PdsTabs {
        "activeTabIndex"?: number;
        /**
          * Sets the starting active tab name and maintains the name as the component re-renders
         */
        "activeTabName": string;
        /**
          * A unique identifier used for the underlying component `id` attribute.
         */
        "componentId": string;
        /**
          * Sets the aria-label attached to the tablist element
         */
        "tablistLabel": string;
        /**
          * Sets tabs variant styles as outlined in Figma documentation
         */
        "variant": 'primary' | 'availability' | 'filter';
    }
    interface PdsTextarea {
        /**
          * A unique identifier used for the underlying component `id` attribute.
         */
        "componentId": string;
        /**
          * Indicates whether or not the textarea is disabled
          * @defaultValue false
         */
        "disabled"?: boolean;
        /**
          * Specifies the error text and provides an error-themed treatment to the field
         */
        "errorMessage"?: string;
        /**
          * Displays a hint or description of the textarea
         */
        "helperMessage"?: string;
        /**
          * Indicates whether or not the textarea is invalid or throws an error
          * @defaultValue false
         */
        "invalid"?: boolean;
        /**
          * Text to be displayed as the textarea label
         */
        "label"?: string;
        /**
          * Specifies the name, submitted with the form name/value pair. This value will mirror the componentId
         */
        "name"?: string;
        /**
          * Event emitted whenever the value of the textarea changes
         */
        "onPdsTextareaChange"?: (event: PdsTextareaCustomEvent<TextareaChangeEventDetail>) => void;
        /**
          * Specifies a short hint that describes the expected value of the textarea
         */
        "placeholder"?: string;
        /**
          * Indicates whether or not the textarea is readonly
          * @defaultValue false
         */
        "readonly"?: boolean;
        /**
          * Indicates whether or not the textarea is required
          * @defaultValue false
         */
        "required"?: boolean;
        /**
          * Sets number of rows of text visible without needing to scroll in the textarea
         */
        "rows"?: number;
        /**
          * The value of the textarea
         */
        "value"?: string;
    }
    interface PdsTooltip {
        /**
          * A unique identifier used for the underlying component `id` attribute.
         */
        "componentId"?: string;
        /**
          * Content for the tooltip. If HTML is required, use the content slot
         */
        "content"?: string;
        /**
          * Determines whether or not the tooltip has an arrow
          * @defaultValue true
         */
        "hasArrow"?: boolean;
        /**
          * Enable this option when using the content slot
          * @defaultValue false
         */
        "htmlContent"?: boolean;
        /**
          * Emitted after a tooltip is closed
         */
        "onPdsTooltipHide"?: (event: PdsTooltipCustomEvent<any>) => void;
        /**
          * Emitted after a tooltip is shown
         */
        "onPdsTooltipShow"?: (event: PdsTooltipCustomEvent<any>) => void;
        /**
          * Determines whether or not the tooltip is visible
          * @defaultValue false
         */
        "opened"?: boolean;
        /**
          * Determines the preferred position of the tooltip
          * @defaultValue "right"
         */
        "placement"?: 'top'
    | 'top-start'
    | 'top-end'
    | 'right'
    | 'right-start'
    | 'right-end'
    | 'bottom'
    | 'bottom-start'
    | 'bottom-end'
    | 'left'
    | 'left-start'
    | 'left-end';
    }
    interface IntrinsicElements {
        "pds-avatar": PdsAvatar;
        "pds-button": PdsButton;
        "pds-checkbox": PdsCheckbox;
        "pds-chip": PdsChip;
        "pds-copytext": PdsCopytext;
        "pds-divider": PdsDivider;
        "pds-image": PdsImage;
        "pds-input": PdsInput;
        "pds-link": PdsLink;
        "pds-progress": PdsProgress;
        "pds-radio": PdsRadio;
        "pds-sortable": PdsSortable;
        "pds-sortable-item": PdsSortableItem;
        "pds-switch": PdsSwitch;
        "pds-tab": PdsTab;
        "pds-tabpanel": PdsTabpanel;
        "pds-tabs": PdsTabs;
        "pds-textarea": PdsTextarea;
        "pds-tooltip": PdsTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "pds-avatar": LocalJSX.PdsAvatar & JSXBase.HTMLAttributes<HTMLPdsAvatarElement>;
            "pds-button": LocalJSX.PdsButton & JSXBase.HTMLAttributes<HTMLPdsButtonElement>;
            "pds-checkbox": LocalJSX.PdsCheckbox & JSXBase.HTMLAttributes<HTMLPdsCheckboxElement>;
            "pds-chip": LocalJSX.PdsChip & JSXBase.HTMLAttributes<HTMLPdsChipElement>;
            "pds-copytext": LocalJSX.PdsCopytext & JSXBase.HTMLAttributes<HTMLPdsCopytextElement>;
            "pds-divider": LocalJSX.PdsDivider & JSXBase.HTMLAttributes<HTMLPdsDividerElement>;
            "pds-image": LocalJSX.PdsImage & JSXBase.HTMLAttributes<HTMLPdsImageElement>;
            "pds-input": LocalJSX.PdsInput & JSXBase.HTMLAttributes<HTMLPdsInputElement>;
            "pds-link": LocalJSX.PdsLink & JSXBase.HTMLAttributes<HTMLPdsLinkElement>;
            "pds-progress": LocalJSX.PdsProgress & JSXBase.HTMLAttributes<HTMLPdsProgressElement>;
            "pds-radio": LocalJSX.PdsRadio & JSXBase.HTMLAttributes<HTMLPdsRadioElement>;
            "pds-sortable": LocalJSX.PdsSortable & JSXBase.HTMLAttributes<HTMLPdsSortableElement>;
            "pds-sortable-item": LocalJSX.PdsSortableItem & JSXBase.HTMLAttributes<HTMLPdsSortableItemElement>;
            "pds-switch": LocalJSX.PdsSwitch & JSXBase.HTMLAttributes<HTMLPdsSwitchElement>;
            "pds-tab": LocalJSX.PdsTab & JSXBase.HTMLAttributes<HTMLPdsTabElement>;
            "pds-tabpanel": LocalJSX.PdsTabpanel & JSXBase.HTMLAttributes<HTMLPdsTabpanelElement>;
            "pds-tabs": LocalJSX.PdsTabs & JSXBase.HTMLAttributes<HTMLPdsTabsElement>;
            "pds-textarea": LocalJSX.PdsTextarea & JSXBase.HTMLAttributes<HTMLPdsTextareaElement>;
            "pds-tooltip": LocalJSX.PdsTooltip & JSXBase.HTMLAttributes<HTMLPdsTooltipElement>;
        }
    }
}
