/* Generate the class names the starting grid column
*/
@mixin generate-column-start($columns) {
  @for $i from 1 through $columns {
    .pds-grid-start-#{$i} {
      grid-column-start: $i;
    }
  }
}

/* Generate the class names the ending grid column
*/
@mixin generate-column-end($columns) {
  @for $i from 1 through $columns {
    .pds-grid-end-#{$i} {
      grid-column-end: $i;
    }
  }
}

/* Generate the class names of the responsive grid system. Include the prefix in the
class name if a prefix exists, otherwise omit from the class name
*/
@mixin generate-columns($prefix, $columns) {
  @for $i from 1 through $columns {
    /* stylelint-disable-next-line function-no-unknown */
    $class-name: if($prefix, 'pds-grid-col-#{$prefix}-#{$i}', 'pds-grid-col-#{$i}');
    .#{$class-name} {
      grid-column: auto / span $i;
    }
  }
}

:host {
  display: block;
}

.pds-grid {
  display: grid;
  gap: var(--pine-spacing-sm);
  grid-template-columns: repeat(12, 1fr);
}

// Base Classes
@include generate-columns(false, 12);

/* Responsive Classes */
@media (max-width: 575px) {
  @include generate-columns('xs', 12);
}

@media (min-width: 576px) {
  @include generate-columns('sm', 12);
}

@media (min-width: 768px) {
  @include generate-columns('md', 12);
}

@media (min-width: 992px) {
  @include generate-columns('lg', 12);
}

@media (min-width: 1200px) {
  @include generate-columns('xl', 12);
}

// OFFSETS <--> Start / End <--> grid-column-start / grid-columnp-end
// the idea is to use grid-column-start based on the the user selection
// Start Example
.pds-grid-start-1 {
  grid-column-start: 1;
}

@include generate-column-start(12);

// End Example
.pds-grid-end-8 {
  grid-column-end: 8;
}

@include generate-column-end(12);

// AUTO
.pds-grid > div {
  // item should size 1 column
  // Do we want this to be 1 column or width: 100%? How to differentiate
}

