:host {
  display: inline;
}

:host([decoration="underline-dotted"]) > * {
  text-decoration-color: var(--pine-color-grey-600);
  text-decoration-line: underline;
  text-decoration-style: dotted;
  text-decoration-thickness: 12%;
  text-underline-offset: 0.3rem;
  text-underline-position: under;
}

:host([decoration="strikethrough"])>* {
  text-decoration: line-through;
}

/* stylelint-disable */
h1 {
  font: var(--pine-typography-heading-1);
  letter-spacing: var(--pine-letter-spacing-heading-1);
}

h2 {
  font: var(--pine-typography-heading-2);
  letter-spacing: var(--pine-letter-spacing-heading-2);
}

h3 {
  font: var(--pine-typography-heading-3);
  letter-spacing: var(--pine-letter-spacing-heading-3);
}

h4 {
  font: var(--pine-typography-heading-4);
  letter-spacing: var(--pine-letter-spacing-heading-4);
}

h5 {
  font: var(--pine-typography-heading-5);
  letter-spacing: var(--pine-letter-spacing-heading-5);
}

h6 {
  font: var(--pine-typography-heading-6);
  letter-spacing: var(--pine-letter-spacing-heading-6);
}

code, em, p, pre, strong {
  font: var(--pine-typography-body);
  letter-spacing: var(--pine-letter-spacing);
}
/* stylelint-enable */

code, pre {
  font-family: monospace;
  letter-spacing: 0;
  line-height: 1;
}

em {
  font-style: normal;
}

strong {
  font-weight: bolder;
}

:host([truncate]) > * {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

:host([italic]) > * {
  font-style: italic;
}

// Colors/Variants/Sentiment

// Variable is set in TSX
// If color prop value isn't valid, will default to body text color
.pds-text {
  color: var(--color, var(--pine-color-text));
  margin: var(--pine-dimension-none);
}

// Font Sizes
$type-sizes: (
  2xl: var(--pine-font-size-body-2xl),
  xl: var(--pine-font-size-body-xl),
  lg: var(--pine-font-size-body-lg),
  md: var(--pine-font-size-body-md),
  sm: var(--pine-font-size-body-sm),
  xs: var(--pine-font-size-body-xs),
  2xs: var(--pine-font-size-body-2xs),
  h1: var(--pine-font-size-heading-1),
  h2: var(--pine-font-size-heading-2),
  h3: var(--pine-font-size-heading-3),
  h4: var(--pine-font-size-heading-4),
  h5: var(--pine-font-size-heading-5),
  h6: var(--pine-font-size-heading-6),
);

@mixin generate-type-sizes($type-sizes) {
  @each $key, $value in $type-sizes {
    .pds-text--size-#{$key} {
      font-size: $value;
    }
  }
}

@include generate-type-sizes($type-sizes);

// Font Weights
$type-weights: (
  extra-light: var(--pine-font-weight-extra-light),
  light: var(--pine-font-weight-light),
  regular: var(--pine-font-weight-regular),
  medium: var(--pine-font-weight-medium),
  semibold: var(--pine-font-weight-semi-bold),
  bold: var(--pine-font-weight-bold),
);

@mixin generate-type-weights($type-weights) {
  @each $key, $value in $type-weights {
    .pds-text--weight-#{$key} {
      font-weight: $value;
    }
  }
}

@include generate-type-weights($type-weights);

// Gutter Sizes
$type-gutters: (
  2xl: var(--pine-dimension-2xl),
  xl: var(--pine-dimension-xl),
  lg: var(--pine-dimension-lg),
  md: var(--pine-dimension-md),
  sm: var(--pine-dimension-sm),
  xs: var(--pine-dimension-xs),
  2xs: var(--pine-dimension-2xs),
);

@mixin generate-type-gutters($type-gutters) {
  @each $key, $value in $type-gutters {
    .pds-text--gutter-#{$key} {
      margin-block-end: $value;
    }
  }
}

@include generate-type-gutters($type-gutters);

// Text Alignment
$type-alignments: (
  start: start,
  center: center,
  end: end,
  justify: justify,
);

@mixin generate-type-alignments($type-alignments) {
  @each $key, $value in $type-alignments {
    .pds-text--align-#{$key} {
      text-align: $value;
    }
  }
}

@include generate-type-alignments($type-alignments);
