name: 'Production Release'

on:
  workflow_call:
    inputs:
      preid:
        description: Which prerelease id should be used? This is only needed when a version is "prepatch", "preminor", "premajor", or "prerelease".
        type: string
        default: ''

      ref:
        type: string
        description: The branch name, tag, or SHA to be checked out. This can also be left blank.
        default: ''

      tag:
        type: 'string'
        required: true
        description: Which npm tag should this be published to

      version:
        type: string
        description: Which version should be published?

  workflow_dispatch:
    inputs:
      preid:
        type: choice
        description: Which prerelease id should be used? This is only needed when a version is "prepatch", "preminor", "premajor", or "prerelease".
        options:
          - ''
          - alpha
          - beta
          - rc
          - next

      ref:
        type: string
        description: The branch name, tag, or SHA to be checked out. This can also be left blank.
        default: ''

      tag:
        type: choice
        required: true
        description: Which npm tag should this be published to
        options:
          - latest
          - next
          - dev

      version:
        type: choice
        description: Which version should be published?
        options:
          - ''
          - patch
          - minor
          - major
          - prepatch
          - preminor
          - premajor
          - prerelease

jobs:
    release:
      permissions:
        id-token: write
      uses: ./.github/workflows/release-packages.yml
      with:
        preid: ${{ inputs.preid }}
        tag: ${{ inputs.tag }}
        version: ${{ inputs.version }}
      secrets: inherit

    finalize-release:
      needs: release
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v3
          with:
            fetch-depth: 0
            ref: ${{ inputs.ref }}

        - name: Configure user
          run: |
            git config user.name "DSS Automation Bot"
            git config user.email "dev+github-bot@kajabi.com"

        - name: Create GitHub Release
          run: lerna version ${{ inputs.version }} --yes --force-publish='*' --conventional-commits --create-release github --preid=${{ inputs.preid }}
          env:
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          shell: bash

        # Lerna does not automatically bump versions
        # - name: Bump Package Lock
        #   run: |
        #     lerna exec "npm install --package-lock-only"
        #     git add .
        #     git commit -m "chore(): update package lock files"
        #     git push
        #   shell: bash
